#!/bin/bash

# Git pre-push hook for Rust projects
# This hook runs cargo fmt and cargo clippy before pushing

set -e

echo "üîç Running pre-push checks..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check if we're in a Rust project
if [ ! -f "Cargo.toml" ]; then
    print_error "No Cargo.toml found. This hook is designed for Rust projects."
    exit 1
fi

# 1. Check formatting
print_status "Checking code formatting with cargo fmt..."
if ! cargo fmt --all -- --check; then
    print_error "Code formatting issues detected!"
    print_warning "Run 'cargo fmt' to fix formatting issues."
    echo ""
    echo "üîß Quick fix:"
    echo "   cargo fmt --all"
    echo ""
    exit 1
fi
print_success "Code formatting is correct ‚úì"

# 2. Run Clippy
print_status "Running Clippy checks..."
if ! cargo clippy --workspace --all-targets --all-features -- -D warnings; then
    print_error "Clippy found issues that must be fixed!"
    print_warning "Run 'cargo clippy --fix --workspace --all-targets --all-features' to auto-fix issues."
    echo ""
    echo "üîß Quick fix:"
    echo "   cargo clippy --fix --workspace --all-targets --all-features"
    echo ""
    exit 1
fi
print_success "Clippy checks passed ‚úì"

# 3. Check if project compiles
print_status "Checking if project compiles..."
if ! cargo check --workspace --all-targets --all-features; then
    print_error "Project doesn't compile!"
    exit 1
fi
print_success "Project compiles successfully ‚úì"

# 4. Run tests (optional, can be disabled by setting SKIP_TESTS=1)
if [ "$SKIP_TESTS" != "1" ]; then
    print_status "Running tests..."
    if ! cargo test --workspace --all-features; then
        print_error "Tests failed!"
        print_warning "Fix failing tests before pushing, or set SKIP_TESTS=1 to skip."
        echo ""
        echo "üîß To skip tests temporarily:"
        echo "   SKIP_TESTS=1 git push"
        echo ""
        exit 1
    fi
    print_success "All tests passed ‚úì"
else
    print_warning "Tests skipped (SKIP_TESTS=1)"
fi

print_success "üéâ All pre-push checks passed! Proceeding with push..."
echo ""

exit 0
