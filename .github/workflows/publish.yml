name: Publish to crates.io

on:
  push:
    tags:
      - 'v*.*.*'  # Trigger on version tags like v1.0.0
  workflow_dispatch:

permissions:
  contents: write  # Required for creating releases

jobs:
  publish:
    runs-on: ubuntu-latest
    env:
      CARGO_REGISTRY_TOKEN: ${{ secrets.CRATES_IO_TOKEN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Get tag name and version
        id: tag
        run: |
          if [ "${{ github.event_name }}" == "push" ]; then
            TAG_NAME=${GITHUB_REF#refs/tags/}
            VERSION=${TAG_NAME#v}  # Remove 'v' prefix for crate version
            echo "TAG_NAME=$TAG_NAME" >> $GITHUB_OUTPUT
            echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
            echo "TRIGGERED_BY_TAG=true" >> $GITHUB_OUTPUT
          else
            echo "TRIGGERED_BY_TAG=false" >> $GITHUB_OUTPUT
          fi

      - name: Show publish mode
        run: |
          if [ "${{ github.event_name }}" == "push" ]; then
            echo "🚀 Publishing triggered by tag: ${{ steps.tag.outputs.TAG_NAME }}"
          else
            echo "🚀 Manual publish triggered"
          fi
          echo "📦 Will publish all crates to crates.io"

      - name: Publish core
        run: |
          cd core
          echo "🚀 PUBLISHING: cfgloader-core to crates.io"
          if ! cargo publish --token "$CARGO_REGISTRY_TOKEN" 2>&1 | tee publish_output.log; then
            if grep -q "crate version .* is already uploaded" publish_output.log; then
              echo "⚠️  Crate cfgloader-core already exists, continuing..."
            else
              echo "❌ Unexpected error publishing cfgloader-core"
              cat publish_output.log
              exit 1
            fi
          else
            echo "✅ Successfully published cfgloader-core"
          fi

      - name: Wait for core publish
        run: sleep 30

      - name: Publish macros
        run: |
          cd macros
          echo "🚀 PUBLISHING: cfgloader_rs_macros to crates.io"
          if ! cargo publish --token "$CARGO_REGISTRY_TOKEN" 2>&1 | tee publish_output.log; then
            if grep -q "crate version .* is already uploaded" publish_output.log; then
              echo "⚠️  Crate cfgloader_rs_macros already exists, continuing..."
            else
              echo "❌ Unexpected error publishing cfgloader_rs_macros"
              cat publish_output.log
              exit 1
            fi
          else
            echo "✅ Successfully published cfgloader_rs_macros"
          fi

      - name: Wait for macros publish
        run: sleep 30

      - name: Publish cfgloader
        run: |
          cd cfgloader
          echo "🚀 PUBLISHING: cfgloader_rs to crates.io"
          if ! cargo publish --token "$CARGO_REGISTRY_TOKEN" 2>&1 | tee publish_output.log; then
            if grep -q "crate version .* is already uploaded" publish_output.log; then
              echo "⚠️  Crate cfgloader_rs already exists, continuing..."
            else
              echo "❌ Unexpected error publishing cfgloader_rs"
              cat publish_output.log
              exit 1
            fi
          else
            echo "✅ Successfully published cfgloader_rs"
          fi

      - name: Create GitHub Release
        if: steps.tag.outputs.TRIGGERED_BY_TAG == 'true'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.tag.outputs.TAG_NAME }}
          name: Release ${{ steps.tag.outputs.TAG_NAME }}
          body: |
            🎉 CFGLoader ${{ steps.tag.outputs.TAG_NAME }} Released!
            
            ## 📦 Published Crates
            - `cfgloader-core` v${{ steps.tag.outputs.VERSION }}
            - `cfgloader_rs_macros` v${{ steps.tag.outputs.VERSION }}
            - `cfgloader_rs` v${{ steps.tag.outputs.VERSION }}
            
            ## 📚 Documentation
            - [docs.rs/cfgloader_rs](https://docs.rs/cfgloader_rs)
            - [crates.io/crates/cfgloader_rs](https://crates.io/crates/cfgloader_rs)
            
            ## 🚀 Usage
            ```toml
            [dependencies]
            cfgloader_rs = "${{ steps.tag.outputs.VERSION }}"
            ```
          draft: false
          prerelease: false
